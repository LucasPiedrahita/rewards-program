/**
 * Function that calculates the reward points generated by a single transaction amount.
 * A customer receives 2 points for every dollar spent over $100 in each transaction,
 * plus 1 point for every dollar spent over $50 in each transaction
 * @author   Lucas Piedrahita
 * @param    {Number} amount    Transaction amount
 * @return   {Number}           Reward points for single transaction
 */
export const calculateRewardsForOneAmount = (amount) => {
  // A customer receives 2 points for every dollar spent over $100 in each transaction,
  // plus 1 point for every dollar spent over $50 in each transaction
  if (amount < 51) return 0
  if (amount <= 100) return Math.floor(amount - 50)
  if (amount > 100) return Math.floor(amount - 100) * 2 + 50
}

/**
 * Function that calculates the total reward points generated by all transactions in a given month.
 * @author   Lucas Piedrahita
 * @param    {Array.<{amount: Number, customerId: String, date: String}>}  transactions  Transactions
 * @param    {Number} month         Zero-based month number, where January is zero
 * @return   {Number}               Total reward points for all transactions in the given month
 */
export const calculateRewardsForOneMonth = (transactions, month) => {
  return transactions
    .filter((transaction) => new Date(transaction.date).getMonth() === month)
    .reduce(
      (totalRewards, transaction) =>
        totalRewards + calculateRewardsForOneAmount(transaction.amount),
      0
    )
}

/**
 * Function that calculates the reward points generated by one customer's transactions
 * over a three-month period, split by month and total of the three months.
 * @author   Lucas Piedrahita
 * @param    {Array.<{amount: Number, customerId: String, date: String}>}  transactions  Transactions
 * @param    {String} customerId    Customer's unique ID
 * @param    {Number} firstMonth    Zero-based month number of the first month in the three-month period, where January is zero
 * @return   {<{customerId: String, firstMonthRewards: Number, secondMonthRewards: Number, thirdMonthRewards: Number, totalRewards: Number}>}               Object of the customer's unique ID, reward totals for each of the three months, and reward total for all three months together
 */
export const calculateRewardsForOneCustomer = (transactions, customerId, firstMonth) => {
  const customerTransactions = transactions.filter(
    (transaction) => transaction.customerId === customerId
  )
  const firstMonthRewards = calculateRewardsForOneMonth(customerTransactions, firstMonth % 12)
  const secondMonthRewards = calculateRewardsForOneMonth(
    customerTransactions,
    (firstMonth + 1) % 12
  )
  const thirdMonthRewards = calculateRewardsForOneMonth(customerTransactions, (firstMonth + 2) % 12)
  const totalRewards = firstMonthRewards + secondMonthRewards + thirdMonthRewards
  return {
    customerId,
    firstMonthRewards,
    secondMonthRewards,
    thirdMonthRewards,
    totalRewards,
  }
}

/**
 * Function that calculates the reward points generated by customers' transactions
 * over a three-month period, split by customer, month and total of the three months.
 * @author   Lucas Piedrahita
 * @param    {Array.<{amount: Number, customerId: String, date: String}>}  transactions  Transactions
 * @param    {Array.<String>} customerIds   Array of Customers' unique IDs
 * @param    {Number} firstMonth    Zero-based month number of the first month in the three-month period, where January is zero
 * @return   {Array.<{customerId: String, firstMonthRewards: Number, secondMonthRewards: Number, thirdMonthRewards: Number, totalRewards: Number}>}  Array of objects that have each customers' unique ID and their reward totals for each of the three months and reward total for all three months together
 */
export const calculateRewardsForAllCustomers = (transactions, customerIds, firstMonth) => {
  return customerIds.map((customerId) =>
    calculateRewardsForOneCustomer(transactions, customerId, firstMonth)
  )
}

export default calculateRewardsForAllCustomers
